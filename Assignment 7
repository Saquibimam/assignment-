                        Session 5

                       Assignment 7

                          Recursion

Q.no - 1 A function that calls itself is said to be recursive. The creation of recursive functions is a powerful technique to solve problems that can be broken down into smaller or simpler form. One common use is to find the factorial of a number. The factorial of a number N is simply the number multiplied by the factorial of (N-1). Complete the code given below to calculate and returns the factorial of a number.         
        
        Examples
   >>> factorial(5)
    120
    >>> factorial(1)
    1
    >>> factorial(0)
    1


Ans - def factorial(n):
    if n == 0:
        return 1
    else:
        return n*factorial(n-1)

Q.no - 2 Write a recursive function power(x, y) to calculate the value of x raised to the power of y. Examples
   >>> power(5, 2)
    25
    >>> power(5, 1)
    5
    >>> power(5, 0)
    1

Ans - def power(x, y):
    if y == 0:
        return 1
    else:
        return x*power(x,(y-1))
Q.no - 3 The Fibonacci numbers are the integer sequence 0, 1, 1, 2, 3, 5, 8, 13, 21, ..., in which each item is formed by adding the previous two. The sequence can be defined recursively by the following definition:

Write a function fibonacci(number) that takes in a number as argument. The function should calculate and return the fibonacci number for the number passed in.                  Examples
   >>> fibonacci(1)
    1
    >>> fibonacci(2)
    1
    >>> fibonacci(3)
    2
    >>> fibonacci(4)
    3
    >>> fibonacci(5)
    5

Ans - def fibonacci(number):
    if number==0:
        return 0
    elif number==1:
        return 1
    else:
        return fibonacci(number-1)+fibonacci(number-2)

Q.no - 4 The greatest common divisor (gcd) of 2 or more non-zero integers, is the largest positive integer that divides the numbers without a remainder. Write a function to compute the gcd of 2 integers using Euclid's algorithm:
             
Examples
   >>> gcd(84, 18)
    6
    >>> gcd(112, 42)
    14
    >>> gcd(5, 4)
    1

Ans - def gcd(a, b):
    if b==0:
        return a
    else:
        return gcd(b,a%b) 

Q.no - 5 A palindrome is a word, phrase, number or other sequence of units that can be read the same way in either direction. Write a recursive function that determines whether the given word is a palindrome.             
Examples
   >>> isPalindrome("Racecar")
    True
    >>> isPalindrome("Never")
    False
    >>> isPalindrome("level")
    True

Ans - def isPalindrome(word):
    word=word.lower()
    if len(word)<1:
        return True
    else:
        if word[0]==word[-1]:
            return isPalindrome(word[1:-1])
        else:
            return False 

Q.no - 6 Write a recursive function sumOfDigits that takes in an integer and returns the sum of the digit in the integer.             
Examples
   >>> sumOfDigits(1234)
    10
    >>> sumOfDigits(4321)
    10
    >>> sumOfDigits(111)
    3
    >>> sumOfDigits(0)
    0

Ans - def sumOfDigits(num):
    if num==0:
        return 0
    else:
        return (num%10)+sumOfDigits(num//10)

Q.no - 7 Write a recursive function countX that takes in a string and returns the number of uppercase character 'X' in the String.             
            
Examples
   >>> countX('aXxXa')
    2
    >>> countX('aaXaXaax')
    2
    >>> countX('xx')
    0


Ans - def countX(s):
    if len(s) < 1:
        return 0
    else:
        count = 0
        if s[0] == 'X':
                count = 1
        return  count+countX(s[1:])

Q.no - 8 Write a recursive function addDashes() that takes in a string and returns a new string with all the characters separated by a "-".             
            
Examples
   >>> addDashes('google')
    'g-o-o-g-l-e'
    >>> addDashes('')
    None
    >>> addDashes('g')
    'g'


Ans - def addDashes(s):
    if len(s) < 1:
        return None
    elif len(s) == 1:
        return s
    else:
        return s[0]+'-'+addDashes(s[1:])

Q.no - 9 Write a recursive function sumNumbersFromOne(number) that takes in a number and returns the sum of all the numbers from one to the number passed in as argument.             
            
Examples
   >>> sumNumbersFromOne(-10)
    'Invalid'
    >>> sumNumbersFromOne(10)
    55
    >>> sumNumbersFromOne(5)
    15


Ans - def sumNumbersFromOne(x):
    if x < 1:
        return 'Invalid'
    if x == 1:
        return 1
    else:
        return x + sumNumbersFromOne(x-1)

Q.no - 10 Write a recursive function numbersInbetween(start, end) that takes in two numbers and returns a common-separated string with all the numbers in between the start and end number inclusive of both numbers.             
            
Examples
   >>> numbersInbetween(5, 10)
    '5,6,7,8,9,10'
    >>> numbersInbetween(5, 0)
    'Invalid'
    >>> numbersInbetween(5, 5)
    '5'
    >>> numbersInbetween(5, 8)
    '5,6,7,8'


Ans - def numbersInbetween(a, b):
    if b<a:
        return "Invalid"
    if a == b:
        return '%d' % (a)
    else:
        return '%s,%s' % (a, numbersInbetween(a+1,b))
Q.no - 11 Write a function createStars(num) that takes in a number as argument and returns a string of stars 2num long.             
Examples
   >>> createStars(0)      # 2 to power of 0 = 1
    '*'
    >>> createStars(1)      # 2 to power of 1 = 2
    '**'
    >>> createStars(2)      # 2 to power of 2 = 4
    '****'
    >>> createStars(3)      # 2 to power of 3 = 8
    '********'

Ans - def createStars(x):
    if x == 0:
        return '*'
    else:
        return '**' * len(createStars(x-1))

Q.no - 12 Write a function createPattern(n) that takes in a number as argument and returns a string based on the following rules. The middle character of the string should always be an asterisk ('*'). There will be 2 asterisks if there is an even number of characters. The string will contain the less-than character ('<') before the asterisk and the greater-than character ('>') after the asterisk.             
Examples
   >>> createPattern(1)
    '*'
    >>> createPattern(2)
    '**'
    >>> createPattern(3)
    '<*>'
    >>> createPattern(4)
    '<**>'
    >>> createPattern(5)
    '<<*>>'

Ans - def createPattern(x):
    if x == 0:
        return
    if x == 1:
        return '*'
    if x == 2:
        return '**'
    else:
        return  '<' + createPattern(x-2) + '>' 

Q.no - 13 Write a function printTwos(n) that takes in a number as argument and returns a string composed of an odd number multiplied by 2s such that the final value is equal to n. There should be equal number of 2s on both sides. Extra 2 should appear at the front of the string. Note: The value of the odd number can be 1.             
Examples
   >>> printTwos(1)
    '1'
    >>> printTwos(2)
    '2 * 1'
    >>> printTwos(10)
    '2 * 5'
    >>> printTwos(20)
    '2 * 5 * 2'
    >>> printTwos(30)
    '2 * 15'
    >>> printTwos(32)
    '2 * 2 * 2 * 1 * 2 * 2'
    >>> printTwos(80)
    '2 * 2 * 5 * 2 * 2'


Ans - def printTwos(n):
    if n % 4 != 0:
        if n % 2 == 0:
            result = printTwos(n/2)
            return "2 * " + result
        else:    
            return str(n)
    else:
        result = printTwos(n/4)
        return "2 * %s * 2" % result

Q.no - 14 The Pascal's Triangle is formed by filling the top 2 rows with '1's. For subsequent row, the numbers at the edge are all '1's. Each element inside the triangle is the sum of the 2 elements above it. Write a recursive function to compute the value of each element given the row and column.
              1               1st
             1  1              2nd
           1  2  1             3rd 
         1  3  3  1            4th
       1  4  6  4  1           5th
     1  5  10 10  5 1          6th
          ...
                         
Examples
   >>> pascal(0, 0)           # Top element
    1              
    >>> pascal(2, 0)           # 3rd row, 1st col 
    1              
    >>> pascal(4, 2)           # 5th row, 3rd col, (4, 2) = (3, 1)+(3, 2)
    6      
    >>> pascal(5, 3)           # 6th row, 4th col, (5, 3) = (4, 2)+(4, 3)
    10     
         
Ans - def pascal(row, col):
    if col == 0:
        return 1
    elif row == 0:
        return 0
    else:
        return pascal(row-1, col) + pascal(row-1, col-1)
